#!/usr/bin/env node

const mysql = require("mysql2");
const config = require("./config");

// ÂëΩ‰ª§Ë°åÂèÇÊï∞Â§ÑÁêÜ
const args = process.argv.slice(2);
const showHelp = args.includes("--help") || args.includes("-h");
const verbose = args.includes("--verbose") || args.includes("-v");
const force = args.includes("--force") || args.includes("-f");
const dropFirst = args.includes("--drop") || args.includes("-d");
const specificDb = args.find((arg) => arg.startsWith("--db="))?.split("=")[1];

if (showHelp) {
  console.log(`
üîß Êï∞ÊçÆÂ∫ìËÆæÁΩÆÂ∑•ÂÖ∑

Áî®Ê≥ï: node setup-db.js [ÈÄâÈ°π]

ÈÄâÈ°π:
  -h, --help         ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ
  -v, --verbose      ÊòæÁ§∫ËØ¶ÁªÜ‰ø°ÊÅØ
  -f, --force        Âº∫Âà∂ÈáçÊñ∞ÂàõÂª∫ÔºàÂç≥‰ΩøÂ∑≤Â≠òÂú®Ôºâ
  -d, --drop         ÂÖàÂà†Èô§Áé∞ÊúâÊï∞ÊçÆÂ∫ìÂÜçÂàõÂª∫
  --db=Êï∞ÊçÆÂ∫ìÂêç       Âè™ËÆæÁΩÆÊåáÂÆöÁöÑÊï∞ÊçÆÂ∫ì
  --version          ÊòæÁ§∫ÁâàÊú¨‰ø°ÊÅØ

Á§∫‰æã:
  node setup-db.js                    # Âü∫Êú¨ËÆæÁΩÆ
  node setup-db.js --verbose          # ËØ¶ÁªÜËÆæÁΩÆ
  node setup-db.js --force            # Âº∫Âà∂ÈáçÊñ∞ÂàõÂª∫
  node setup-db.js --drop             # Âà†Èô§ÂêéÈáçÊñ∞ÂàõÂª∫
  node setup-db.js --db=user          # Âè™ËÆæÁΩÆÁî®Êà∑Êï∞ÊçÆÂ∫ì
  node setup-db.js --help             # ÊòæÁ§∫Â∏ÆÂä©

‚ö†Ô∏è  Ë≠¶Âëä: --drop ÈÄâÈ°π‰ºöÂà†Èô§Áé∞ÊúâÊï∞ÊçÆÔºÅ
`);
  process.exit(0);
}

if (args.includes("--version")) {
  console.log("Êï∞ÊçÆÂ∫ìËÆæÁΩÆÂ∑•ÂÖ∑ v1.0.0");
  process.exit(0);
}

console.log("üîß ËÆæÁΩÆÊï∞ÊçÆÂ∫ìÂíåË°®ÁªìÊûÑ...");
if (verbose) {
  console.log(`üì° ËøûÊé•‰ø°ÊÅØ: ${config.database.host}:3306`);
  console.log(`üë§ Áî®Êà∑: ${config.database.user}`);
  if (dropFirst) {
    console.log("‚ö†Ô∏è  Â∞ÜÂà†Èô§Áé∞ÊúâÊï∞ÊçÆÂ∫ìÔºÅ");
  }
  if (force) {
    console.log("üîÑ Âº∫Âà∂ÈáçÊñ∞ÂàõÂª∫Ê®°Âºè");
  }
}

// ÂàõÂª∫Êï∞ÊçÆÂ∫ìËøûÊé•
const connection = mysql.createConnection({
  host: config.database.host,
  user: config.database.user,
  password: config.database.password,
  charset: config.database.charset,
  timezone: config.database.timezone,
});

connection.connect((err) => {
  if (err) {
    console.error("‚ùå Êï∞ÊçÆÂ∫ìËøûÊé•Â§±Ë¥•:", err.message);
    if (verbose) {
      console.error("üîß ËØ∑Ê£ÄÊü•:");
      console.error("  - MySQLÊúçÂä°ÊòØÂê¶ËøêË°å");
      console.error("  - ‰∏ªÊú∫Âú∞ÂùÄÊòØÂê¶Ê≠£Á°Æ");
      console.error("  - Áî®Êà∑ÂêçÂíåÂØÜÁ†ÅÊòØÂê¶Ê≠£Á°Æ");
      console.error("  - ÁΩëÁªúËøûÊé•ÊòØÂê¶Ê≠£Â∏∏");
    }
    process.exit(1);
  }

  console.log("‚úÖ ÊàêÂäüËøûÊé•Âà∞MySQLÊï∞ÊçÆÂ∫ìÊúçÂä°Âô®");
  if (verbose) {
    console.log(`üìä MySQLÁâàÊú¨: ${connection.serverVersion}`);
  }

  setupDatabases();
});

function setupDatabases() {
  let databases = Object.values(config.database.databases);

  // Â¶ÇÊûúÊåáÂÆö‰∫ÜÁâπÂÆöÊï∞ÊçÆÂ∫ìÔºåÂè™Â§ÑÁêÜËØ•Êï∞ÊçÆÂ∫ì
  if (specificDb) {
    const dbKey = Object.keys(config.database.databases).find(
      (key) =>
        key === specificDb || config.database.databases[key] === specificDb
    );
    if (dbKey) {
      databases = [config.database.databases[dbKey]];
      console.log(
        `üéØ Âè™ËÆæÁΩÆÊï∞ÊçÆÂ∫ì: ${config.database.databases[dbKey]} (${dbKey})`
      );
    } else {
      console.error(`‚ùå Êú™ÊâæÂà∞Êï∞ÊçÆÂ∫ì: ${specificDb}`);
      console.log(
        `üìã ÂèØÁî®ÁöÑÊï∞ÊçÆÂ∫ìÈîÆ: ${Object.keys(config.database.databases).join(
          ", "
        )}`
      );
      console.log(
        `üìã ÂèØÁî®ÁöÑÊï∞ÊçÆÂ∫ìÂêç: ${Object.values(config.database.databases).join(
          ", "
        )}`
      );
      process.exit(1);
    }
  }

  let completed = 0;
  let totalDatabases = databases.length;

  console.log(`üìã Â∞ÜËÆæÁΩÆ ${totalDatabases} ‰∏™Êï∞ÊçÆÂ∫ì`);

  const finishSetup = () => {
    completed++;
    if (completed === totalDatabases) {
      console.log("üéâ Êï∞ÊçÆÂ∫ìËÆæÁΩÆÂÆåÊàêÔºÅ");
      if (verbose) {
        console.log("üí° ‰ΩøÁî® node check-db.js --tables Ê£ÄÊü•Ë°®ÁªìÊûÑ");
      }
      connection.end();
    }
  };

  databases.forEach((dbName) => {
    if (dropFirst) {
      // ÂÖàÂà†Èô§Êï∞ÊçÆÂ∫ì
      connection.query(`DROP DATABASE IF EXISTS \`${dbName}\``, (err) => {
        if (err) {
          console.error(`‚ùå Âà†Èô§Êï∞ÊçÆÂ∫ì ${dbName} Â§±Ë¥•:`, err.message);
          return;
        }
        if (verbose) {
          console.log(`üóëÔ∏è  Êï∞ÊçÆÂ∫ì ${dbName} Â∑≤Âà†Èô§`);
        }
        createDatabase(dbName);
      });
    } else {
      createDatabase(dbName);
    }
  });

  function createDatabase(dbName) {
    // ÂàõÂª∫Êï∞ÊçÆÂ∫ì
    connection.query(`CREATE DATABASE IF NOT EXISTS \`${dbName}\``, (err) => {
      if (err) {
        console.error(`‚ùå ÂàõÂª∫Êï∞ÊçÆÂ∫ì ${dbName} Â§±Ë¥•:`, err.message);
        finishSetup();
        return;
      }
      console.log(`‚úÖ Êï∞ÊçÆÂ∫ì ${dbName} Â∑≤ÂàõÂª∫`);

      // ÂàõÂª∫Ë°®ÁªìÊûÑ
      setupTables(dbName, finishSetup);
    });
  }
}

function setupTables(dbName, finishSetup) {
  const dbConnection = mysql.createConnection({
    host: config.database.host,
    user: config.database.user,
    password: config.database.password,
    database: dbName,
    charset: config.database.charset,
    timezone: config.database.timezone,
  });

  const tableConfig = getTableConfig(dbName);

  if (!tableConfig) {
    console.log(`‚ö†Ô∏è  Êú™Áü•ÁöÑÊï∞ÊçÆÂ∫ì: ${dbName}`);
    dbConnection.end();
    finishSetup();
    return;
  }

  if (verbose) {
    console.log(`üîß ‰∏∫ ${dbName} ÂàõÂª∫Ë°®: ${tableConfig.tableName}`);
  }

  // Â¶ÇÊûúÂº∫Âà∂Ê®°ÂºèÔºåÂÖàÂà†Èô§Ë°®
  if (force) {
    dbConnection.query(
      `DROP TABLE IF EXISTS \`${tableConfig.tableName}\``,
      (err) => {
        if (err) {
          console.error(
            `‚ùå Âà†Èô§Ë°® ${tableConfig.tableName} Â§±Ë¥•:`,
            err.message
          );
          dbConnection.end();
          finishSetup();
          return;
        }
        if (verbose) {
          console.log(`üóëÔ∏è  Ë°® ${tableConfig.tableName} Â∑≤Âà†Èô§`);
        }
        createTable();
      }
    );
  } else {
    createTable();
  }

  function createTable() {
    dbConnection.query(tableConfig.createSQL, (err) => {
      if (err) {
        console.error(`‚ùå ÂàõÂª∫Ë°® ${tableConfig.tableName} Â§±Ë¥•:`, err.message);
        if (verbose) {
          console.error("üîß ËØ∑Ê£ÄÊü•:");
          console.error("  - Ë°®ÁªìÊûÑSQLÊòØÂê¶Ê≠£Á°Æ");
          console.error("  - Êï∞ÊçÆÂ∫ìÊùÉÈôêÊòØÂê¶Ë∂≥Â§ü");
          console.error("  - Ë°®ÂêçÊòØÂê¶ÂÜ≤Á™Å");
        }
      } else {
        console.log(`‚úÖ Ë°® ${tableConfig.tableName} Â∑≤ÂàõÂª∫ (${dbName})`);
        if (verbose) {
          console.log(`üìä Ë°®ÁªìÊûÑ: ${tableConfig.description}`);
        }
      }

      dbConnection.end();
      finishSetup();
    });
  }
}

function getTableConfig(dbName) {
  const tableConfigs = {
    micro_user_service_db: {
      tableName: "users",
      description: "Áî®Êà∑Ë°® - Â≠òÂÇ®Áî®Êà∑‰ø°ÊÅØ",
      createSQL: `
        CREATE TABLE IF NOT EXISTS users (
          id INT AUTO_INCREMENT PRIMARY KEY,
          username VARCHAR(50) UNIQUE NOT NULL,
          email VARCHAR(100) UNIQUE NOT NULL,
          password VARCHAR(255) NOT NULL,
          name VARCHAR(100),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
      `,
    },
    micro_product_service_db: {
      tableName: "products",
      description: "‰∫ßÂìÅË°® - Â≠òÂÇ®‰∫ßÂìÅ‰ø°ÊÅØ",
      createSQL: `
        CREATE TABLE IF NOT EXISTS products (
          id INT AUTO_INCREMENT PRIMARY KEY,
          name VARCHAR(200) NOT NULL,
          price DECIMAL(10,2) NOT NULL,
          description TEXT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
      `,
    },
    micro_order_service_db: {
      tableName: "orders",
      description: "ËÆ¢ÂçïË°® - Â≠òÂÇ®ËÆ¢Âçï‰ø°ÊÅØ",
      createSQL: `
        CREATE TABLE IF NOT EXISTS orders (
          id INT AUTO_INCREMENT PRIMARY KEY,
          user_id INT NOT NULL,
          product_id INT NOT NULL,
          quantity INT NOT NULL,
          total_amount DECIMAL(10,2) NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
      `,
    },
    micro_file_service_db: {
      tableName: "files",
      description: "Êñá‰ª∂Ë°® - Â≠òÂÇ®Êñá‰ª∂‰ø°ÊÅØ",
      createSQL: `
        CREATE TABLE IF NOT EXISTS files (
          id INT AUTO_INCREMENT PRIMARY KEY,
          filename VARCHAR(255) NOT NULL,
          originalname VARCHAR(255) NOT NULL,
          mimetype VARCHAR(100),
          size INT,
          path VARCHAR(500) NOT NULL,
          description TEXT,
          upload_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
      `,
    },
  };

  return tableConfigs[dbName] || null;
}
